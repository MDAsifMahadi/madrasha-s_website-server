const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const {Admin} = require("../models/schemaModels");

const SECRET_KEY = "your_secret_key"; // JWT ржЯрзЛржХрзЗржирзЗрж░ ржЬржирзНржп рж╕рж┐ржХрзНрж░рзЗржЯ ржХрзА

const adminHandler = {};

// ЁЯФ╡ рж╕рж╛ржЗржиржЖржк рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
adminHandler.signup = async (req, res) => {
    try {
        const { email, password } = req.body;

        // ржЗржорзЗржЗрж▓ ржЖржЧрзЗ ржерзЗржХрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рж╛
        const existingAdmin = await Admin.findOne({ email });
        if (existingAdmin) {
            return res.status(400).json({ message: "ржПржЗ ржЗржорзЗржЗрж▓ ржЗрждрж┐ржоржзрзНржпрзЗ ржирж┐ржмржирзНржзрж┐ржд!" });
        }

        // ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржПржиржХрзНрж░рж┐ржкрзНржЯ ржХрж░рж╛
        const hashedPassword = await bcrypt.hash(password, 10);

        // ржирждрзБржи ржЗржЙржЬрж╛рж░ рждрзИрж░рж┐
        const newAdmin = new Admin({ email, password: hashedPassword });
        await newAdmin.save();

        res.status(201).json({ message: "рж╕рж╛ржЗржиржЖржк рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ!" });
    } catch (error) {
        res.status(500).json({ message: "рж╕рж╛ржЗржиржЖржк ржХрж░рждрзЗ ржмрзНржпрж░рзНрже!", error });
    }
};

// ЁЯФ┤ рж▓ржЧржЗржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
adminHandler.login = async (req, res) => {
    try {
        const { email, password } = req.body;

        // ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
        const admin = await Admin.findOne({ email });
        if (!admin) {
            return res.status(401).json({ message: "ржЗржорзЗржЗрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!" });
        }

        // ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржорж┐рж▓рж┐ржпрж╝рзЗ ржжрзЗржЦрж╛
        const isPasswordValid = await bcrypt.compare(password, admin.password);
        if (!isPasswordValid) {
            return res.status(401).json({ message: "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржнрзБрж▓!" });
        }

        // JWT ржЯрзЛржХрзЗржи рждрзИрж░рж┐
        const token = jwt.sign({ id: admin._id, email: admin.email }, SECRET_KEY, { expiresIn: "1h" });

        res.status(200).json({ message: "рж▓ржЧржЗржи рж╕ржлрж▓!", token });
    } catch (error) {
        res.status(500).json({ message: "рж▓ржЧржЗржи ржХрж░рждрзЗ ржмрзНржпрж░рзНрже!", error });
    }
};

// ЁЯЯб ржЗржЙржЬрж╛рж░ ржЖржкржбрзЗржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи)
adminHandler.update = async (req, res) => {
    try {
        const { id } = req.params;
        const { newPassword } = req.body;

        // ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
        const admin = await Admin.findById(id);
        if (!admin) {
            return res.status(404).json({ message: "ржЗржЙржЬрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!" });
        }

        // ржирждрзБржи ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржПржиржХрзНрж░рж┐ржкрзНржЯ ржХрж░рзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛
        if (newPassword) {
            admin.password = await bcrypt.hash(newPassword, 10);
        }

        await admin.save();
        res.status(200).json({ message: "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ!" });
    } catch (error) {
        res.status(500).json({ message: "ржЖржкржбрзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже!", error });
    }
};

module.exports = adminHandler;
